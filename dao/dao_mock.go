// Code generated by MockGen. DO NOT EDIT.
// Source: dao/dao.go

package dao

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/companieshouse/insolvency-api/models"
)

// MockDAO is a mock of DAO interface.
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO.
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance.
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// CreateInsolvencyResource mocks base method.
func (m *MockDAO) CreateInsolvencyResource(dao *models.InsolvencyResourceDao) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInsolvencyResource", dao)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// CreateInsolvencyResource indicates an expected call of CreateInsolvencyResource.
func (mr *MockDAOMockRecorder) CreateInsolvencyResource(dao interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInsolvencyResource", reflect.TypeOf((*MockDAO)(nil).CreateInsolvencyResource), dao)
}

// GetInsolvencyResource mocks base method.
func (m *MockDAO) GetInsolvencyResource(transactionID string) (models.InsolvencyResourceDao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInsolvencyResource", transactionID)
	ret0, _ := ret[0].(models.InsolvencyResourceDao)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// GetInsolvencyResource indicates an expected call of GetInsolvencyResource.
func (mr *MockDAOMockRecorder) GetInsolvencyResource(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInsolvencyResource", reflect.TypeOf((*MockDAO)(nil).GetInsolvencyResource), transactionID)
}

// CreatePractitionerResourceForInsolvencyCase mocks base method.
func (m *MockDAO) CreatePractitionerResourceForInsolvencyCase(dao *models.PractitionerResourceDao, transactionID string) (int,error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePractitionerResourceForInsolvencyCase", dao, transactionID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// CreatePractitionerResourceForInsolvencyCase indicates an expected call of CreatePractitionerResourceForInsolvencyCase.
func (mr *MockDAOMockRecorder) CreatePractitionerResourceForInsolvencyCase(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePractitionerResourceForInsolvencyCase", reflect.TypeOf((*MockDAO)(nil).CreatePractitionerResourceForInsolvencyCase), transactionID)
}

// CreatePractitionerResourceForInsolvencyCase mocks base method.
func (m *MockDAO) CreateAppointmentResource(dao *models.AppointmentResourceDao) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppointmentResource", dao)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// CreateAppointmentResource indicates an expected call of CreateAppointmentResource.
func (mr *MockDAOMockRecorder) CreateAppointmentResource(transactionInterface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppointmentResource", reflect.TypeOf((*MockDAO)(nil).CreateAppointmentResource), transactionInterface)
}

// GetPractitionerResources mocks base method.
func (m *MockDAO) GetPractitionerResources(transactionID string) ([]models.PractitionerResourceDao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPractitionerResources", transactionID)
	ret0, _ := ret[0].([]models.PractitionerResourceDao)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// GetPractitionerResources indicates an expected call of GetPractitionerResources.
func (mr *MockDAOMockRecorder) GetPractitionerResources(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPractitionerResources", reflect.TypeOf((*MockDAO)(nil).GetPractitionerResources), transactionID)
}

// GetPractitionerResource mocks base method.
func (m *MockDAO) GetPractitionerResource(practitionerID string, transactionID string) (models.PractitionerResourceDao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPractitionerResource", practitionerID,transactionID)
	ret0, _ := ret[0].(models.PractitionerResourceDao)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// GetPractitionerResource indicates an expected call of GetPractitionerResource.
func (mr *MockDAOMockRecorder) GetPractitionerResource(practitionerID,transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPractitionerResource", reflect.TypeOf((*MockDAO)(nil).GetPractitionerResource),practitionerID, transactionID)
}

// DeletePractitioner mocks base method.
func (m *MockDAO) DeletePractitioner(practitionerID string, transactionID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePractitioner", practitionerID,transactionID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// DeletePractitioner indicates an expected call of DeletePractitioner.
func (mr *MockDAOMockRecorder) DeletePractitioner(practitionerID,transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePractitioner", reflect.TypeOf((*MockDAO)(nil).DeletePractitioner),practitionerID, transactionID)
}

// AppointPractitioner mocks base method.
func (m *MockDAO) AppointPractitioner(dao *models.AppointmentResourceDao, transactionID string, practitionerID string) (error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppointPractitioner",dao,transactionID,practitionerID)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(int)
	return ret0,ret1
}

// AppointPractitioner indicates an expected call of AppointPractitioner.
func (mr *MockDAOMockRecorder) AppointPractitioner(dao,transactionID,practitionerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppointPractitioner", reflect.TypeOf((*MockDAO)(nil).AppointPractitioner),dao,transactionID,practitionerID)
}

// DeletePractitionerAppointment mocks base method.
func (m *MockDAO) DeletePractitionerAppointment(transactionID string, practitionerID string) (error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePractitionerAppointment", transactionID, practitionerID)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(int)
	return ret0,ret1
}

// DeletePractitionerAppointment indicates an expected call of DeletePractitionerAppointment.
func (mr *MockDAOMockRecorder) DeletePractitionerAppointment(transactionID,practitionerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePractitionerAppointment", reflect.TypeOf((*MockDAO)(nil).DeletePractitionerAppointment),transactionID,practitionerID)
}

// AddAttachmentToInsolvencyResource mocks base method.
func (m *MockDAO) AddAttachmentToInsolvencyResource(transactionID string, fileID string, attachmentType string) (*models.AttachmentResourceDao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttachmentToInsolvencyResource", transactionID, fileID,attachmentType)
	ret0, _ := ret[0].(*models.AttachmentResourceDao)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// AddAttachmentToInsolvencyResource indicates an expected call of AddAttachmentToInsolvencyResource.
func (mr *MockDAOMockRecorder) AddAttachmentToInsolvencyResource(transactionID,fileID,attachmentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttachmentToInsolvencyResource", reflect.TypeOf((*MockDAO)(nil).AddAttachmentToInsolvencyResource),transactionID, fileID,attachmentType)
}

// GetAttachmentResources mocks base method.
func (m *MockDAO) GetAttachmentResources(transactionID string) ([]models.AttachmentResourceDao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachmentResources", transactionID)
	ret0, _ := ret[0].([]models.AttachmentResourceDao)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// GetAttachmentResources indicates an expected call of GetAttachmentResources.
func (mr *MockDAOMockRecorder) GetAttachmentResources(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachmentResources", reflect.TypeOf((*MockDAO)(nil).GetAttachmentResources),transactionID)
}

// GetAttachmentFromInsolvencyResource mocks base method.
func (m *MockDAO) GetAttachmentFromInsolvencyResource(transactionID string, fileID string) (models.AttachmentResourceDao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachmentFromInsolvencyResource", transactionID)
	ret0, _ := ret[0].(models.AttachmentResourceDao)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// GetAttachmentFromInsolvencyResource indicates an expected call of GetAttachmentFromInsolvencyResource.
func (mr *MockDAOMockRecorder) GetAttachmentFromInsolvencyResource(transactionID,fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachmentFromInsolvencyResource", reflect.TypeOf((*MockDAO)(nil).GetAttachmentFromInsolvencyResource),transactionID,fileID)
}

// DeleteAttachmentResource mocks base method.
func (m *MockDAO) DeleteAttachmentResource(transactionID, attachmentID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachmentResource", transactionID,attachmentID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// DeleteAttachmentResource indicates an expected call of DeleteAttachmentResource.
func (mr *MockDAOMockRecorder) DeleteAttachmentResource(transactionID,attachmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachmentResource", reflect.TypeOf((*MockDAO)(nil).DeleteAttachmentResource),transactionID,attachmentID)
}

// UpdateAttachmentStatus mocks base method.
func (m *MockDAO) UpdateAttachmentStatus(transactionID, attachmentID string, avStatus string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttachmentStatus", transactionID,attachmentID,avStatus)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// UpdateAttachmentStatus indicates an expected call of UpdateAttachmentStatus.
func (mr *MockDAOMockRecorder) UpdateAttachmentStatus(transactionID,attachmentID,avStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttachmentStatus", reflect.TypeOf((*MockDAO)(nil).UpdateAttachmentStatus),transactionID,attachmentID,avStatus)
}

// CreateResolutionResource mocks base method.
func (m *MockDAO) CreateResolutionResource(dao *models.ResolutionResourceDao, transactionID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResolutionResource",dao, transactionID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// CreateResolutionResource indicates an expected call of CreateResolutionResource.
func (mr *MockDAOMockRecorder) CreateResolutionResource(dao,transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResolutionResource", reflect.TypeOf((*MockDAO)(nil).CreateResolutionResource),dao,transactionID)
}

// CreateStatementOfAffairsResource mocks base method.
func (m *MockDAO) CreateStatementOfAffairsResource(dao *models.StatementOfAffairsResourceDao, transactionID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatementOfAffairsResource",dao, transactionID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// CreateStatementOfAffairsResource indicates an expected call of CreateStatementOfAffairsResource.
func (mr *MockDAOMockRecorder) CreateStatementOfAffairsResource(dao,transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatementOfAffairsResource", reflect.TypeOf((*MockDAO)(nil).CreateStatementOfAffairsResource),dao,transactionID)
}

// GetStatementOfAffairsResource mocks base method.
func (m *MockDAO)  GetStatementOfAffairsResource(transactionID string) (models.StatementOfAffairsResourceDao, error)  {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementOfAffairsResource", transactionID)
	ret0, _ := ret[0].(models.StatementOfAffairsResourceDao)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// GetStatementOfAffairsResource indicates an expected call of GetStatementOfAffairsResource.
func (mr *MockDAOMockRecorder) GetStatementOfAffairsResource(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementOfAffairsResource", reflect.TypeOf((*MockDAO)(nil).GetStatementOfAffairsResource),transactionID)
}

// DeleteStatementOfAffairsResource mocks base method.
func (m *MockDAO)  DeleteStatementOfAffairsResource(transactionID string) (int, error)  {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementOfAffairsResource", transactionID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// DeleteStatementOfAffairsResource indicates an expected call of DeleteStatementOfAffairsResource.
func (mr *MockDAOMockRecorder) DeleteStatementOfAffairsResource(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatementOfAffairsResource", reflect.TypeOf((*MockDAO)(nil).DeleteStatementOfAffairsResource),transactionID)
}


// CreateProgressReportResource mocks base method.
func (m *MockDAO) CreateProgressReportResource(dao *models.ProgressReportResourceDao, transactionID string) (int, error)  {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProgressReportResource",dao,transactionID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// CreateProgressReportResource indicates an expected call of CreateProgressReportResource.
func (mr *MockDAOMockRecorder) CreateProgressReportResource(dao,transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProgressReportResource", reflect.TypeOf((*MockDAO)(nil).CreateProgressReportResource),dao,transactionID)
}

// GetResolutionResource mocks base method.
func (m *MockDAO) GetResolutionResource(transactionID string) (models.ResolutionResourceDao, error)  {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolutionResource",transactionID)
	ret0, _ := ret[0].(models.ResolutionResourceDao)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// GetResolutionResource indicates an expected call of GetResolutionResource.
func (mr *MockDAOMockRecorder) GetResolutionResource(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolutionResource", reflect.TypeOf((*MockDAO)(nil).GetResolutionResource),transactionID)
}

// DeleteResolutionResource mocks base method.
func (m *MockDAO) DeleteResolutionResource(transactionID string) (int, error)  {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResolutionResource",transactionID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0,ret1
}

// DeleteResolutionResource indicates an expected call of DeleteResolutionResource.
func (mr *MockDAOMockRecorder) DeleteResolutionResource(transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResolutionResource", reflect.TypeOf((*MockDAO)(nil).DeleteResolutionResource),transactionID)
}
 
